// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Trip {
  id             Int             @id @default(autoincrement())
  userId         String
  title          String
  description    String
  destination    String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  itineraries    Itinerary[]
  accommodations Accommodation[]
  activities     Activity[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model Activity {
  id          Int      @id @default(autoincrement())
  itineraryId Int?     
  tripId      Int
  title       String
  description String
  date        DateTime
  time        DateTime
  location    String
  notes       String
  createdAt   DateTime @default(now())

  itinerary Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: SetNull)
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Accommodation {
  id          Int      @id @default(autoincrement())
  tripId      Int
  name        String
  location    String
  checkIn     DateTime
  checkOut    DateTime
  notes       String
  createdAt   DateTime @default(now())
  phoneNumber String
  website     String

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("accommodations")
}

model Itinerary {
  id        Int      @id @default(autoincrement())
  title     String
  tripId    Int
  date      DateTime
  time      DateTime
  location  String
  notes     String
  createdAt DateTime @default(now())

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("itineraries")
  Activity Activity[]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  trips         Trip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
