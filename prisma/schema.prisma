generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Trip {
  id             Int             @id @default(autoincrement())
  userId         String
  title          String
  description    String?
  destination    String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  accommodations Accommodation[]
  itinerary_items ItineraryItem[]
  itineraries    Itinerary[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model ItineraryItem {
  id          Int        @id @default(autoincrement())
  itineraryId Int
  tripId      Int
  title       String
  description String?
  date        DateTime
  time        DateTime
  location    String
  notes       String?
  createdAt   DateTime   @default(now())
  trip        Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id])

  @@map("itinerary_items")
  @@index([tripId])
}

model Accommodation {
  id          Int      @id @default(autoincrement())
  tripId      Int
  name        String
  location    String
  checkIn     DateTime
  checkOut    DateTime
  notes       String?
  createdAt   DateTime @default(now())
  phoneNumber String
  website     String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("accommodations")
}

model Itinerary {
  id        Int        @id @default(autoincrement())
  title     String
  tripId    Int
  datetime  DateTime
  location  String
  notes     String?
  createdAt DateTime   @default(now())
  ItineraryItem  ItineraryItem[]
  trip      Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  trips         Trip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
