generator client {
  provider = "prisma-client-js"
  seed = "ts-node --transpile-only prisma/seed.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Trip {
  id             Int             @id @default(autoincrement())
  userId         String
  title          String
  description    String?
  destination    String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  accommodations Accommodation[]
  itineraries    Itinerary[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trips")
  PackingList PackingList[]
}

model Itinerary {
  id        Int        @id @default(autoincrement())
  title     String?
  tripId    Int
  date      DateTime
  location  String?
  notes     String?
  createdAt DateTime   @default(now())
  itineraryItems  ItineraryItem[]
  trip      Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("itineraries")
  @@unique([tripId, date])
  @@index([date])
}

model ItineraryItem {
  id          Int        @id @default(autoincrement())
  itineraryId Int
  title       String?
  description String?
  time        DateTime?
  location    String?
  notes       String?
  createdAt   DateTime   @default(now())
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@map("itinerary_items")
  @@index([itineraryId])
}

model Accommodation {
  id          Int      @id @default(autoincrement())
  tripId      Int
  name        String
  location    String
  checkIn     DateTime
  checkOut    DateTime
  notes       String?
  createdAt   DateTime @default(now())
  phoneNumber String
  website     String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("accommodations")
}

model PackingList {
  id        Int          @id @default(autoincrement())
  tripId    Int                 @unique
  createdAt DateTime            @default(now())
  trip      Trip                @relation(fields: [tripId], references: [id], onDelete: Cascade)
  items     PackingListItem[]

  @@map("packing_lists")
  @@index([tripId])
}

model PackingCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique      // "Toiletries", "Clothing", etc.
  createdAt DateTime @default(now())
  items     PackingListItem[]
}

model PackingListItem {
  id            Int             @id @default(autoincrement())
  packingListId Int
  categoryId    Int
  name          String
  quantity      Int             @default(1)
  isPacked      Boolean         @default(false)
  createdAt     DateTime        @default(now())

  packingList   PackingList     @relation(fields: [packingListId], references: [id], onDelete: Cascade)
  category      PackingCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("packing_list_items")
  @@index([packingListId])
  @@index([categoryId])
}


model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  trips         Trip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
